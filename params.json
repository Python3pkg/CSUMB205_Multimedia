{"name":"CSUMB 205 - Image Class","tagline":"A wrapper class for PIL's Image class for academic purposes","body":"## CSUMB's CST205 - A simple Image Class\r\n\r\nThis project offers students access to a simple rgbImage class, which is built on the use of the Image module in the PIL package. As PIL is no longer updated for Python 3, this package relies on Pillow.\r\n\r\nThis package assumes that the user is using at least Python 3.4.2.\r\n\r\n**If you have not installed Python 3.4.2, please download it from** [python.org](https://www.python.org/downloads/).\r\n\r\nIf you are using Windows, make sure to check the option to *add the python.exe to your path*. PIP will not work otherwise.\r\n\r\n***\r\n## INSTALLATION\r\nYou can download this package through the use of PIP. From an administrator command line, run...\r\n\r\n     pip install CSUMB205-Image\r\n\r\nOn Mac OSX, you will have multiple versions of Python. You still need to install Python 3.4.2, but when you run pip, you must use...\r\n\r\n     pip3 install CSUMB205-Image\r\n\r\n***\r\n## USAGE:\r\nThe interface is meant to be as simple as possible. This is how you import the necessary class.\r\n\r\n     from simpleImage.ImageClass import rgbImage\r\n\r\n\r\nThis is how you actually create an Image object.\r\n\r\n     myImage = rgbImage(\"/absolute/path/to/your/image\")\r\n\r\n\r\nNOTE: If you leave the constructor empty, tkinter will open a file dialog, asking you to choose a file.\r\n\r\n     myImage = rgbImage(\"\")  ===>  tkinter filedialog GUI\r\n\r\n\r\nNow that we have an image imported, what values do we have? We can get the image's size, or number of pixels.\r\n\r\n     numOfPixels = myImage.size\r\n\r\nWe can also get the width and heigh individually.\r\n\r\n     myWidth = myImage.width\r\n     myHeight = myImage.height\r\n\r\n\r\nThe most important part of our image, however, is the list of pixels. We can get individual pixels by using two array references, where the first value is the row of picture (starting from 0), and the second is the column of the picture (starting from 0).\r\n\r\n     a_pixel = myImage.pixels[0][0]\r\n\r\nEach element of the images list \"pixels\" is an `rgbPixel` object. These objects have a \"red\", \"green\", and \"blue\" attribute, which are integers. We can then loop through every pixels and set it's blue or red values.\r\n\r\n      for row in myImage.pixels:\r\n          for pixel in row:\r\n              pixel.setRed(255)\r\n              pixel.setBlue(0)\r\n\r\n\r\nIf a pixel's attribute is set to anything above 255, the object will automatically wrap the value around. For example, setting a pixel's red value to 300 will actually set it to `300-256`, or 44.\r\n\r\n     myImage.pixels[0][0].setRed(300)  ===>  myImage.pixels[0][0] red is now 44\r\n\r\n\r\nFor more information on the `rgbImage` class, type `help('simpleImage.ImageClass')` in the Python interpreter\r\n\r\n***\r\n### PyPI:\r\nThe Python Package Index page for this package can be [found here](https://pypi.python.org/pypi/CSUMB205-Image).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}